name: Deploy

concurrency:
  group: single

on:
  issue_comment:
    types:
      - created
  pull_request:
    types: [closed]

jobs:
  verify-and-deploy:
    runs-on: ubuntu:latest
    steps:
      - name: Determine event type
        id: determine_event
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "event_type=pull_request" >> $GITHUB_ENV
          else
            echo "event_type=issue_comment" >> $GITHUB_ENV
          fi

      - name: Ensure comment is on a PR
        if: ${{ env.event_type == 'issue_comment' && github.event.issue.pull_request == null }}
        run: exit 0

      - name: Exit if not 'deploy staging'
        if: ${{ env.event_type == 'issue_comment' && !startsWith(github.event.comment.body, 'deploy staging') }}
        run: exit 0

      - name: React to comment
        if: ${{ env.event_type == 'issue_comment' }}
        uses: dkershner6/reaction-action@v2
        with:
          token: ${{ secrets.NAVINA_BOT_GITHUB_TOKEN }}
          commentId: ${{ github.event.comment.id }}
          reaction: "eyes"

      - name: Check if PR is merged
        if: ${{ env.event_type == 'pull_request' }}
        run: |
          if [ "${{ github.event.pull_request.merged }}" = "true" ]; then
            echo "is_merged=true" >> $GITHUB_ENV
          else
            echo "is_merged=false" >> $GITHUB_ENV
          fi

      - name: Checkout code for staging
        if: ${{ env.event_type == 'issue_comment' }}
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.issue.number }}/head
          fetch-depth: 0
          set-safe-directory: true

      - name: Checkout code for prod
        if: ${{ env.event_type == 'pull_request' && env.is_merged == 'true' }}
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0
          set-safe-directory: true

      - name: Verify branch state against master
        if: ${{ env.event_type == 'issue_comment' }}
        id: check_branch
        run: |
          git fetch origin master
          if ! git merge-base --is-ancestor origin/master HEAD; then
            echo "branch_outdated=true" >> $GITHUB_ENV
          else
            echo "branch_outdated=false" >> $GITHUB_ENV
          fi

      - name: Notify if branch is outdated
        if: ${{ env.event_type == 'issue_comment' && env.branch_outdated == 'true' }}
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Branch not up to date with master.'
            })

      - name: Stop on outdated branch
        if: ${{ env.event_type == 'issue_comment' && env.branch_outdated == 'true' }}
        run: exit 1

      - name: Set environment for staging
        if: ${{ env.event_type == 'issue_comment' && env.branch_outdated == 'false' }}
        run: echo "DEPLOY_ENV=staging" >> $GITHUB_ENV

      - name: Set environment for production
        if: ${{ env.event_type == 'pull_request' && env.is_merged == 'true' }}
        run: echo "DEPLOY_ENV=prod" >> $GITHUB_ENV

      - name: Deploy
        if: ${{ env.DEPLOY_ENV }}
        run: |
          # cd common
          # serverless deploy -s $DEPLOY_ENV -c serverless-resources.yml
          # exit_code=$?
          # if [ $exit_code -ne 0 ]; then
          #   echo "DEPLOYMENT_STATUS=$exit_code" >> $GITHUB_ENV
          #   exit $exit_code
          # fi
          # cd ../
          # serverless deploy -s $DEPLOY_ENV --verbose
          # exit_code=$?
          # echo "DEPLOYMENT_STATUS=$exit_code" >> $GITHUB_ENV
          # exit $exit_code

          echo "would deploy to $DEPLOY_ENV"
          echo "DEPLOYMENT_STATUS=0" >> $GITHUB_ENV

      - name: Post-deployment comment
        if: ${{ env.DEPLOY_ENV }}
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = (process.env.event_type === 'issue_comment') 
              ? context.issue.number 
              : context.payload.pull_request.number;

            const msg = (process.env.DEPLOYMENT_STATUS === '0') 
              ? `ðŸ˜‡ Deployment to ${process.env.DEPLOY_ENV} succeeded` 
              : `ðŸ˜« Deployment to ${process.env.DEPLOY_ENV} failed`;
            
            github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: msg
            });
